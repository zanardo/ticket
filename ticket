#!/usr/bin/perl
# Copyright (c) 2006-2010, J. A. Zanardo Jr. <zanardo@gmail.com>
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#
# SQLite schema:
#
#CREATE TABLE comments ( id integer primary key not null, ticket_id integer not null references ticket ( id ), datecreated datetime not null default ( datetime('now', 'localtime') ), user text not null, comment text not null );
#CREATE TABLE statustrack ( id integer primary key not null, ticket_id integer not null references ticket ( id ), datecreated datetime not null default ( datetime('now', 'localtime') ), user text not null, status text not null );
#CREATE TABLE tags ( ticket_id integer not null references ticket ( id ), tag text not null );
#CREATE TABLE tickets ( id integer primary key not null, title text not null, status integer not null default ( 0 ), priority integer not null default ( 3 ), datecreated datetime not null default ( datetime('now', 'localtime') ), datemodified datetime not null default ( datetime('now', 'localtime') ), dateclosed datetime, user text not null );
#CREATE TABLE timetrack ( id integer primary key not null, ticket_id integer not null references ticket ( id ), datecreated datetime not null default ( datetime('now', 'localtime') ), user text not null, minutes integer not null );

use strict;
use warnings;

use DBI;
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use POSIX qw(strftime);

## Configure -------------------------------------------------------
my $db = 'ticket.db';		# Caminho do banco de dados
## -----------------------------------------------------------------

my $uri = $ENV{'SCRIPT_NAME'};
my $css = "$uri?action=get-css";
my $VERSION = '0.9';
my $user = $ENV{'REMOTE_USER'} || 'anônimo';

if(not -f $db) { die "$db não encontrado." }

my $dbh = DBI->connect("dbi:SQLite:$db","","")
	or die $!;

my $q = $ENV{'PATH_INFO'} || '';

# Descrição das Prioridades
my %priodesc = (
	'1' => '1. Ação Urgente',
	'2' => '2. Atenção',
	'3' => '3. Prioridade Normal',
	'4' => '4. Baixa Prioridade',
	'5' => '5. Baixíssima Prioridade'
);

if(defined param('searchtkt')) {
	my $search = param('searchtkt');
	my $open = 'STATUS = 0';
	if($search =~ s/^ALL //) { $open = '(1=1)' }
	my $searche = escapeHTML($search);

	my $title = '';
	if($search eq '') {
		$title = 'Últimos Tickets Modificados';
	}
	else {
		$title = "Procura Tickets: '$searche'";
	}

	# Show ticket.
	if($search =~ /^#(\d+)$/) {
		print redirect("$uri/$1");
		exit;
	}

	my $count = 0;

	print header(-expires => 'now'), 
		start_html(-style => 
			{'src' => $css}, -title => $title );

	emit_header();
	print qq{<span class="title">$title</span>}, p;

	my $sql = '';
	if($search eq '') {
		$sql = qq{
			SELECT *
			FROM tickets
			WHERE title <> ?
			ORDER BY datemodified DESC
			LIMIT 100
		};
	}
	else {
		$sql = qq{
			SELECT *
			FROM tickets
				WHERE id IN ( SELECT docid FROM search WHERE search MATCH ? )
		      AND $open
			ORDER BY datemodified DESC
		};
	}

	foreach(@{sql($sql, $search)}) {
		$count++;
		show_ticket_small($_);
	}

	print p;
	if($count == 100) { print "$count ticket(s) encontrado(s) - busca limitada a 100 tickets." }
	else { print "$count ticket(s) encontrado(s)." }
	
	emit_footer();

}
elsif(defined param('action') and param('action') eq 'create-new-ticket') {
	my $title = param('title') || '';
	die 'O título deve ser preenchido.' if $title =~ /^[\s\t\r\n]*$/;
	sql('insert into tickets ( title, user ) values ( ?, ? )', $title, $user);
	print redirect("$uri/" . $dbh->func('last_insert_rowid'));
	populate_search($dbh->func('last_insert_rowid'));
}
elsif(defined param('action') and param('action') eq 'create-new-note') {
	my $text = param('text') || '';
	die if $text =~ /^[\s\t\r\n]*$/;
	my $id = param('id');
	$dbh->begin_work;
	sql('insert into comments ( ticket_id, user, comment ) values ( ?,?,? )', $id, $user, $text);
	sql('update tickets set datemodified = datetime(\'now\', \'localtime\') where id = ?', $id);
	$dbh->commit;
	print redirect("$uri/$id");
	populate_search($id);
}
elsif(defined param('action') and param('action') eq 'register-minutes') {
	my $minutes = param('minutes') || 0;
	die if $minutes !~ /^[\d]+$/;
	my $id = param('parent');
	$dbh->begin_work;
	sql('insert into timetrack ( ticket_id, user, minutes ) values ( ?,?,? )', $id, $user, $minutes);
	sql('update tickets set datemodified = datetime(\'now\', \'localtime\') where id = ?', $id);
	$dbh->commit;
	print redirect("$uri/$id");
}
elsif(defined param('action') and param('action') eq 'close-ticket') {
	my $id = param('id') or die 'no id';
	$dbh->begin_work;
	sql('update tickets set status = 1, dateclosed = datetime(\'now\', \'localtime\'), 
		datemodified = datetime(\'now\', \'localtime\') where id = ?', $id);
	sql('insert into statustrack ( ticket_id, user, status ) values ( ?,?,\'close\')', $id, $user);
	$dbh->commit;
	print redirect("$uri/$id");
	populate_search($id);
}
elsif(defined param('action') and param('action') eq 'reopen-ticket') {
	my $id = param('id') or die 'no id';
	$dbh->begin_work;
	sql('update tickets set status = 0, dateclosed = null, 
		datemodified = datetime(\'now\', \'localtime\') where id = ?', $id);
	sql('insert into statustrack ( ticket_id, user, status ) values ( ?,?,\'reopen\')', $id, $user);
	$dbh->commit;
	print redirect("$uri/$id");
	populate_search($id);
}
elsif(defined param('action') and param('action') eq 'save-tags-ticket') {
	my $id = param('id') or die 'no id';
	my $tags = param('text') || ' ';
	my %tags = map { $_, 1 } split /[\s\t\r\n]+/, $tags;
	$dbh->begin_work;
	sql('delete from tags where ticket_id = ?', $id);
	foreach(keys %tags) {
		sql('insert into tags ( ticket_id, tag ) values ( ?,? )', $id, $_);
	}
	$dbh->commit;
	print redirect("$uri/$id");
	populate_search($id);
}
elsif(defined param('action') and param('action') eq 'change-ticket-prio') {
	my $id = param('id') or die 'no id';
	my $prio = param('prio');
	die 'invalid prio' unless $prio =~ /^[1-5]$/;
	sql('update tickets set priority = ? where id = ?', $prio, $id);
	print redirect("$uri/$id");
}
elsif(defined param('action') and param('action') eq 'save-title-ticket') {
	my $id = param('id') or die 'no id';
	my $text = param('text') || '(sem título)';
	sql('update tickets set title = ? where id = ?', $text, $id);
	print redirect("$uri/$id");
	populate_search($id);
}
elsif(defined param('action') and param('action') eq 'get-css') {
	print header(-type => 'text/css', -expires => '+1d');
	while(<DATA>) { print }
}

# Lista tickets em aberto, ordenados por prioridade.
elsif($q eq '') {
	my $count = 0;

	print header( -expires => 'now' ),
      start_html(
        -style  => { 'src' => $css },
        -title  => 'Tickets Abertos',
      );

	emit_header();

	print q{<span class="title">Tickets Abertos</span>}, p;

	my $sql = qq{
		select *
		from tickets
		where status = 0
		order by priority asc, datecreated desc};

	foreach(@{sql($sql)}) {	
		$count++;
		show_ticket_small($_);
	}

	print p, "$count ticket(s) encontrado(s).";

	emit_footer();

}

# Tela de detalhes de um ticket, onde é possível efetuar-se ações como
# adição de notas, fechamento, etc.
elsif($q =~ /^\/(\d+)$/) {
	my $id = $1;
	my $head = <<'	END';
	  var panels = new Array('note', 'prio', 'tags', 'title', 'minutes');
	  var selectedTab = null;
	  function showPanel(tab, name)
	  {
		if (selectedTab) 
		{
		  selectedTab.style.backgroundColor = '';
		}
		selectedTab = tab;
		selectedTab.style.backgroundColor = '#D3D3D3';
		for(i = 0; i < panels.length; i++)
		{
		  document.getElementById(panels[i]).style.display = (name == panels[i]) ? 'block':'none';
		}
		return false;
	  }
	END
	print header(-expires => 'now');
	print start_html(-style => {'src' => $css}, 
		-title => "Detalhe: Ticket #$id", 
		-script => $head
	);
	my $r = sql('select * from tickets where id = ?', $id)->[0];
	if(not defined $r) { die "Ticket $id not found." }

	&emit_header;
	print qq{<span class="title">Detalhe: Ticket #$id</span>},p ;
	show_ticket($r);
	if($r->{'status'} == 0) {
		print q{<table class="actions" border="0"><tr><td>};
		print q{<a class="tab" onclick="return showPanel(this, 'note');">Adicionar Nota</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'prio');">Prioridade de Ação</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'tags');">Palavras-Chave</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'title');">Título</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'minutes');">Tempo</a>};
		print q{</td></tr></table>}, br;
	}
	elsif($r->{'status'} == 1) {
		print q{<table class="actions" border="0"><tr><td>};
		print q{<a class="tab" onclick="return showPanel(this, 'tags');">Palavras-Chave</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'title');">Título</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'minutes');">Tempo</a>};
		print q{</td></tr></table>};
	}
	show_form_new_note($id);
	show_form_change_prio($id, $r->{'priority'});
	show_form_edit_tags_ticket($id);
	show_form_title_ticket($id, $r->{'title'});
	show_form_minutes_ticket($id);

	emit_footer();
}

elsif($q eq '/new-ticket') {
	print header(-expires => 'now'), start_html(-style => {'src' => $css}, 
		-title => 'Novo Ticket', -onload => 'document.f.title.focus();' );
	emit_header();
	print q{<span class="title">Novo Ticket</span>}, p;
    print q{<a name='new'></a>}, start_form(-name => 'f'),
      textfield( -name => 'title', -size => 90 ), br,
      hidden(
        -name     => 'action',
        -value    => 'create-new-ticket',
        -override => 1
      ),
      submit( 'submit', 'Criar' ), end_form;

	  emit_footer();
}

# Lista tickets por tag. Mostra tickets em aberto e fechados, e registros simples.
elsif($q =~ /^\/(.+?)$/) {
	my $tag = $1;
	my $count = 0;
	my $sql = q{
		select t.*
		from tickets as t inner join tags as g on ( g.ticket_id = t.id ) 
		where g.tag = ?
		  and t.status = 0
	    order by t.priority, t.datecreated 
	};

    print header( -expires => 'now' ),
      start_html( -style => { 'src' => $css }, -title => "Palavra-chave: $tag" );

	&emit_header;
	print qq{<span class="title">Palavra-chave: $tag</span>}, p;

	foreach(@{sql($sql, $tag)}) {
		$count++;
		show_ticket_small($_);
	}

	print p, "$count ticket(s) encontrado(s).";

	emit_footer()

}
else { die 'invalid url' }

$dbh->disconnect;

sub sanitize_text {
	my $text = shift || return;
	$text =~ s/\r//sg;
	$text =~ s/&/&amp;/gs;
	$text =~ s/</&lt;/gs;
	$text =~ s/>/&gt;/gs;
	$text =~ s/\r?\n/<br>/sg;
	$text =~ s/\t/&nbsp;&nbsp;&nbsp;/sg;
	$text =~ s/(<br>){1,}$//;
	$text =~ s/#([0-9]+)/<a title="Ver Ticket #$1" href='$uri\/$1'>#$1<\/a>/sg;
	return $text;
}

sub show_form_new_note {
	my $id = shift;
	print q{<div class="panel" id="note" style="display: none">};
	print start_form(),
		textarea(-name => 'text', -rows=>4, -columns=>70), br,
		hidden(-name => 'action', -value => 'create-new-note', -override => 1),
		hidden('id', $id),
		submit('submit', 'Adicionar nota'),
		end_form;
	print q{</div>};
}

sub show_form_change_prio {
	my $id = shift; my $prio = shift;
	print q{<div class="panel" id="prio" style="display: none">};
	print qq{
		<form method="post" action="" enctype="multipart/form-data">
		<select name="prio" >};
	foreach(sort keys %priodesc) {
		if($_ == $prio) {
			print qq{<option selected="selected" value="$_">$priodesc{$_}</option>};
		}
		else {
			print qq{<option value="$_">$priodesc{$_}</option>};
		}
	}
	print qq{
		</select> <input type="hidden" name="action" 
			value="change-ticket-prio"  />
		<input type="hidden" name="id" value="$id"  />
		<input type="submit" name="submit" value="Mudar prioridade de ação" /></form>
	};
	print q{</div>};
}

sub show_form_edit_tags_ticket {
	my $id = shift;
	print q{<div class="panel" id="tags" style="display: none">};
	my $tags = join ' ', get_tags_from_ticket($id);
	print start_form(),
		textfield(-name => 'text', -size => 70, -value=>$tags), br,
		hidden(-name => 'action', -value => 'save-tags-ticket', -override => 1),
		hidden('id', $id),
		submit('submit', 'Salvar palavras-chave'), p,
		font({-color => '#A5A5A5'}, 
		small('Palavras-chave podem ser utilizadas para classificar os Tickets. ',
		'Separar as palavras-chave por espaços.')),
		end_form;
	print q{</div>};
}

sub show_form_title_ticket {
	my $id = shift;
	my $title = shift;
	print q{<div class="panel" id="title" style="display: none">};
	print start_form(),
		textfield(-name => 'text', -size=>70, -value=>$title), br,
		hidden(-name => 'action', -value => 'save-title-ticket', -override => 1),
		hidden('id', $id),
		submit('submit', 'Salvar título'),
		end_form;
	print q{</div>};
}

sub show_form_minutes_ticket {
	my $id = shift;
	my $title = shift;
	print q{<div class="panel" id="minutes" style="display: none">};
	print start_form(),
		textfield(-name => 'minutes', -size => 31,  -value=>''), br,
		hidden(-name => 'action', -value => 'register-minutes', -override => 1),
		hidden('parent', $id),
		submit('submit', 'Contabilizar minutos'),
		end_form;
	print q{</div>};
}

sub populate_search {
	my $id = shift;
	my $text = '';
	my $tag = '';
	my $user = ''; # todos os usuários que alteraram o ticket
	$dbh->begin_work;
	sql('delete from search where docid = ?', $id);
	my $title = sql('select title from tickets where id = ?', $id)->[0]->{'title'};
	foreach(@{sql('select comment, user from comments where ticket_id = ?', $id)}) {
		$text .= $_->{'comment'} . ' ';
		$user .= $_->{'user'} . ' ';
	}
	foreach(@{sql('select tag from tags where ticket_id = ?', $id)}) {
		$tag .= $_->{'tag'} . ' ';
	}
	sql('insert into search (docid, title, text, tag, user) values (?,?,?,?,?)', $id, $title, $text, $tag, $user);
	$dbh->commit;
}

sub show_ticket_small {
	my $r = shift;
	my $bgcolor;
	my $priocolor = '';
	my $title = $r->{'title'} || '';
	if($r->{'status'} == 1) {
		$bgcolor = '#e1e1e1';
	}
	elsif($r->{'status'} == 0) {
		$bgcolor = '';
		if($r->{'priority'} == 1)    { $priocolor = '#FF8D8F' }
		elsif($r->{'priority'} == 2) { $priocolor = '#EDFF9F' }
		elsif($r->{'priority'} == 3) { $priocolor = '' }
		elsif($r->{'priority'} == 4) { $priocolor = '#6DF2B2' }
		elsif($r->{'priority'} == 5) { $priocolor = '#9FEFF2' }
	}
	print qq{<table class="ticket" width="100%" border="0" bgcolor="$bgcolor">};
	print qq{<tr><td width="5px" title="$priodesc{$r->{priority}}" bgcolor="$priocolor">&nbsp;</td>}; #"
	print qq{<td width="80px" valign="top">};
	my $lab = "Criado: $r->{datecreated} \nModificado: $r->{datemodified} \nAutor: $r->{user} ";
	if($r->{status} == 1) { $lab .= "\nFechado: $r->{dateclosed}" }
	print qq{<b><a class="ticketlabel" title="$lab" href="$uri/$r->{'id'}">#$r->{'id'}</a></b>}; #"
	my @tags = get_tags_from_ticket($r->{'id'});
	print q{</td><td valign="top">};
	print span({-class => 'tktitle'}, $title);
	print "</td><td valign='top' align='right'>";
	foreach(@tags) {
		my $tag = CGI::escape($_);
		print " <a href='$uri/$tag' class='tag'>$_</a>";
	}
	print q{</td></tr></table>};
}

sub show_ticket {
	my $r = shift;
	my $bgcolor;
	my $priocolor = '';
	my $title = $r->{'title'} || '';
	if($r->{'status'} == 1) {
		$bgcolor = '#e1e1e1';
	}
	elsif($r->{'status'} == 0) {
		$bgcolor = '';
		if($r->{'priority'} == 1)    { $priocolor = '#FF8D8F' }
		elsif($r->{'priority'} == 2) { $priocolor = '#EDFF9F' }
		elsif($r->{'priority'} == 3) { $priocolor = '' }
		elsif($r->{'priority'} == 4) { $priocolor = '#6DF2B2' }
		elsif($r->{'priority'} == 5) { $priocolor = '#9FEFF2' }
	}
	print qq{<table class="ticket" width="100%" border="0" bgcolor="$bgcolor">};
	print qq{<tr><td width="5px" title="$priodesc{$r->{priority}}" bgcolor="$priocolor">&nbsp;</td>}; #"
	print qq{<td width="120px" valign="top">};
	print qq{<b><a class="ticketlabel" href="$uri/$r->{'id'}">Ticket #$r->{'id'}</a></b><br>}; #"
	my $datec = strip_date($r->{'datecreated'});
	print qq{Criado: <span title="$r->{'datecreated'}">$datec</span><br>}; #"
	if($r->{'status'} == 1) {
		my $dated = strip_date($r->{'dateclosed'});
		print qq{Fechado: <span title="$r->{'dateclosed'}">$dated</span><br>}; #"
	}
	print qq{Autor: $r->{'user'}<br>};
	my @tags = get_tags_from_ticket($r->{'id'});
	foreach(@tags) {
		my $tag = CGI::escape($_);
		print "<a href='$uri/$tag' class='tag'>$_</a>", " ";
	}

	if($r->{'status'} == 0) {
		print p, start_form(),
			hidden(-name => 'action', -value => 'close-ticket', -override => 1),
			hidden('id', $r->{'id'}),
			submit('submit', 'fechar'),
			end_form;
	}
	else {
		print p, start_form(),
			hidden(-name => 'action', -value => 'reopen-ticket', -override => 1),
			hidden('id', $r->{'id'}),
			submit('submit', 'reabrir'),
			end_form;
	}
	print q{</td><td valign="top">};
	print span({-class => 'tktitle'}, $title), p;
	foreach(@{sql('
		select *
		from (
		  select datecreated
		    , user
			, case status when \'close\' then \'fechado\' when \'reopen\' then \'reaberto\' end as comment
			, 1 as negrito
		  from statustrack
		  where ticket_id = ?
		  union all
		  select datecreated
		    , user
			, comment
			, 0 as negrito
		  from comments
		  where ticket_id = ?
		  union all
		  select datecreated
		    , user
			, minutes || \' minutos trabalhados\' 
			, 1 as negrito
		  from timetrack
		  where ticket_id = ?
		)
		order by datecreated
	', $r->{'id'}, $r->{'id'}, $r->{'id'})}) {
		my $date = strip_date($_->{'datecreated'});
		print br, qq{<b title="$_->{'datecreated'}">$date - $_->{'user'}: </b>}; #"
		if($_->{'negrito'} == 1) { print '<b><i>' . sanitize_text($_->{'comment'}) . '</i></b>' }
		else { print sanitize_text($_->{'comment'}) }
	}
	print q{</td></tr></table><p>};
}

sub get_tags_from_ticket {
	my $id = shift;
	my @tags = map { $_ = $_->{'tag'} }
      @{ sql( 'select tag from tags where ticket_id = ?', $id ) };
	return sort @tags;
}

# Emite o cabeçalho padrão das páginas, com menu no topo e barra de pesquisa.
sub emit_header {
	print qq{
		<table border="0" align="right">
		<tr>
		<td class="topmenu">
			olá <b>$user</b>! 
			<a href='$uri' accesskey='A'>tickets abertos</a>
			| <a href='$uri/new-ticket' accesskey='N'>novo ticket</a>
		</td> <tr></tr> <td align=right>
		<form method="post" action="$uri" enctype="multipart/form-data">
			<input type="text" name="searchtkt" size="15" accesskey='S'>
			<input type="submit" name="search" value="procura" />
		</form>
		</td></tr></table>
	};
}

# Emite rodapé com nome do sistema e versão.
sub emit_footer {
	print qq{<p><small><font color="gray"><div align="right">sistema
		<a href="http://zanardo.org/ticket.html">ticket</a> versão $VERSION</small></div></font>};
}

# Recebe "2005-05-05 05:05:05" e converte para "2005-05-05".
sub strip_date {
	my $datetime = shift;
	$datetime =~ s/^(\d{4}-\d{2}-\d{2}) .*$/$1/;
	return $datetime;
}

# Executa uma sentença SQL, opcionalmente com parâmetros, e retorna uma arrayref
# de hashrefs com os resultados.
sub sql {
	my $sql = shift;
	my $sth = $dbh->prepare($sql) or die $dbh->errstr;
	$sth->execute(@_) or die $dbh->errstr;
	return unless $sql =~ /^[\s\n\r\t]*SELECT/i;
	my $result = [ ];
	while(my $r = $sth->fetchrow_hashref) {
		push @$result, $r;
	}
	return $result;
}

__DATA__
body { 
	margin: 1em 2em 2em 2em;
	font-family: Verdana, Arial, sans-serif;
	font-size: 9pt;
	background-color: #F1F3F4;
}

.tab { 
	color: #0000EE;
	text-decoration: underline;
	font-family: Verdana, Arial, sans-serif;
	font-size: 8pt;
}

a:link { color: #0000EE; }
a:visited { color: #0000EE; }
a:active { color: #0000EE; }
a:hover { color: #FF0000; }

input, textarea, select, submit { 
	font-family: Verdana, Arial, sans-serif;
	font-size: 8pt;
	background-color: #F1F3F4;
	border: 1px solid #336699; 
}

.topmenu {
	font-family: Arial, sans-serif;
	font-size: 9pt;
}

.title {
  font-family: "Gill Sans", "Trebuchet MS", Verdana, sans-serif;
  font-size: 24pt;
  font-weight: normal; 
}

.tags {
	border: 1px dotted #336699; 
	font-family: Verdana, Arial, sans-serif;
	font-size: 8pt;
}

.actions {
}

.ticket {
	font-family: Verdana, Arial, sans-serif;
	font-size: 10px;
	border: 1px solid #ffffff; 
}

.ticketlabel {
	font-size: 12px;
}

.tag {
	background-color: yellow;
	text-decoration: none;
	font-weight: bold;
}

.tktitle { font-family: "Verdana"; font-size: 12px; font-weight: bold; }
