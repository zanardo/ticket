#!/usr/bin/perl
# Copyright (c) 2006-2010, J. A. Zanardo Jr. <zanardo@gmail.com>
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#
# SQLite schema:
#
# CREATE TABLE TAG (
#     TICKET INTEGER,
#     TAG VARCHAR(100)
# );
# CREATE TABLE TICKET (
#     ID INTEGER PRIMARY KEY,
#     TITLE TEXT,
#     STATUS INTEGER(1),
#     TYPE INTEGER(1),
#     PRIO INTEGER(1),
#     IDPARENT INTEGER,
#     DATECREATED DATETIME,
#     DATECLOSED DATETIME,
#     DATEMODIFIED DATETIME,
#     USER VARCHAR(50),
#     MINUTES INT,
#     TEXT BLOB
# );
# CREATE VIRTUAL TABLE SEARCH USING fts3 ( title, text, tag, user );
# CREATE INDEX IDTICKET ON TICKET (ID);

use strict;
use warnings;

use DBI;
use CGI qw(:standard);
use CGI::Carp qw(fatalsToBrowser);
use POSIX qw(strftime);

## Configure -------------------------------------------------------
my $db = 'ticket.db';		# Caminho do banco de dados
## -----------------------------------------------------------------

my $uri = $ENV{'SCRIPT_NAME'};
my $css = "$uri?action=get-css";
my $VERSION = '0.9';
my $user = $ENV{'REMOTE_USER'} || 'anônimo';

if(not -f $db) { die "$db não encontrado." }

my $dbh = DBI->connect("dbi:SQLite:$db","","")
	or die $!;

my $q = $ENV{'PATH_INFO'} || '';

# Descrição das Prioridades
my %priodesc = (
	'1' => '1. Ação Urgente',
	'2' => '2. Atenção',
	'3' => '3. Prioridade Normal',
	'4' => '4. Baixa Prioridade',
	'5' => '5. Baixíssima Prioridade'
);

if(defined param('search')) {
	my $search = param('search');
	my $searche = escapeHTML($search);

	my $title = '';
	if($search eq '') {
		$title = 'Últimos tickets modificados';
	}
	else {
		$title = "Procura tickets: '$searche'";
	}

	# Show ticket.
	if($search =~ /^#(\d+)$/) {
		print redirect("$uri/$1");
		exit;
	}

	my $count = 0;

	print header(-expires => 'now'), 
		start_html(-style => 
			{'src' => $css}, -title => $title );

	emit_header();
	print qq{<span class="title">$title</span>}, p;

	my $sql = '';
	if($search eq '') {
		$sql = qq{
			SELECT *
			FROM ticket
			WHERE type = 1
			  AND title <> ?
			ORDER BY datemodified DESC
			LIMIT 100
		};
	}
	else {
		$sql = qq{
			SELECT *
			FROM ticket
			WHERE type = 1
			  AND id IN ( SELECT docid FROM search WHERE search MATCH ? )
			ORDER BY datemodified DESC
		};
	}

	foreach(@{sql($sql, $search)}) {
		$count++;
		show_ticket_small($_);
	}

	print p;
	if($count == 100) { print "$count ticket(s) encontrado(s) - busca limitada a 100 tickets." }
	else { print "$count ticket(s) encontrado(s)." }
	
	emit_footer();

}
elsif(defined param('action') and param('action') eq 'create-new-ticket') {
	my $title = param('title') || '';
	die 'O título deve ser preenchido.' if $title =~ /^[\s\t\r\n]*$/;
	sql('INSERT INTO TICKET (STATUS, TYPE, DATECREATED, DATEMODIFIED, USER, MINUTES, PRIO, TITLE)
 		 VALUES (?, ?, ?, ?, ?, 0, 3, ?)', 
		 0, 1, &timestamp_now(), &timestamp_now(), $user, $title);
	populate_search($dbh->func('last_insert_rowid'));
	print redirect("$uri/" . $dbh->func('last_insert_rowid'));
}
elsif(defined param('action') and param('action') eq 'create-new-note') {
	my $text = param('text') || '';
	die if $text =~ /^[\s\t\r\n]*$/;
	my $parent = param('parent');
	$dbh->begin_work;
	sql('INSERT INTO TICKET (TYPE, DATECREATED, IDPARENT, USER, TEXT)
 		 VALUES (3, ?, ?, ?, ?)', &timestamp_now(), $parent, $user, $text);
	&update_ticket_mtime($parent);
	$dbh->commit;
	populate_search($parent);
	print redirect("$uri/$parent");
}
elsif(defined param('action') and param('action') eq 'register-minutes') {
	my $minutes = param('minutes') || 0;
	die if $minutes !~ /^[\d]+$/;
	my $parent = param('parent');
	$dbh->begin_work;
	sql('INSERT INTO TICKET (TYPE, DATECREATED, IDPARENT, USER, MINUTES)
 		 VALUES (7, ?, ?, ?, ?)', &timestamp_now(), $parent, $user, $minutes);
	$dbh->commit;
	print redirect("$uri/$parent");
}
elsif(defined param('action') and param('action') eq 'close-ticket') {
	my $id = param('id') or die 'no id';
	my $text = param('text') || ' ';
	$dbh->begin_work;
	sql("UPDATE TICKET SET STATUS=1, DATECLOSED=? WHERE ID=?", &timestamp_now(), $id);
	&update_ticket_mtime($id);
	sql("INSERT INTO TICKET (TYPE, DATECREATED, IDPARENT, USER, TEXT)
		VALUES (5, ?, ?, ?, ?)", &timestamp_now(), $id, $user, $text);
	$dbh->commit;
	populate_search($id);
	print redirect("$uri/$id");
}
elsif(defined param('action') and param('action') eq 'reopen-ticket') {
	my $id = param('id') or die 'no id';
	my $text = param('text') || ' ';
	$dbh->begin_work;
	sql("UPDATE TICKET SET STATUS=0, DATECLOSED=NULL WHERE ID=?", $id);
	&update_ticket_mtime($id);
	sql("INSERT INTO TICKET (TYPE, DATECREATED, USER, IDPARENT, TEXT)
		VALUES (6, ?, ?, ?, ?)", &timestamp_now(), $user, $id, $text);
	$dbh->commit;
	populate_search($id);
	print redirect("$uri/$id");
}
elsif(defined param('action') and param('action') eq 'save-tags-ticket') {
	my $id = param('id') or die 'no id';
	my $tags = param('text') || ' ';
	my %tags = map { $_, 1 } split /[\s\t\r\n]+/, $tags;
	$dbh->begin_work;
	sql("DELETE FROM TAG WHERE TICKET=?", $id);
	foreach(keys %tags) {
		sql("INSERT INTO TAG (TICKET, TAG) VALUES (?, ?)", $id, $_);
	}
	populate_search($id);
	$dbh->commit;
	print redirect("$uri/$id");
}
elsif(defined param('action') and param('action') eq 'change-ticket-prio') {
	my $id = param('id') or die 'no id';
	my $text = param('text') || ' ';
	my $prio = param('prio');
	die 'invalid prio' unless $prio =~ /^[1-5]$/;
	sql('UPDATE TICKET SET PRIO=? WHERE ID=?', $prio, $id);
	print redirect("$uri/$id");
}
elsif(defined param('action') and param('action') eq 'save-title-ticket') {
	my $id = param('id') or die 'no id';
	my $text = param('text') || '(sem título)';
	sql('UPDATE TICKET SET TITLE=? WHERE ID=?', $text, $id);
	populate_search($id);
	print redirect("$uri/$id");
}
elsif(defined param('action') and param('action') eq 'get-css') {
	print header(-type => 'text/css', -expires => '+1d');
	while(<DATA>) { print }
}

# Lista tickets em aberto, ordenados por prioridade.
elsif($q eq '') {
	my $count = 0;

	print header( -expires => 'now' ),
      start_html(
        -style  => { 'src' => $css },
        -title  => 'Tickets Abertos',
      );

	emit_header();

	print q{<span class="title">Tickets Abertos</span>}, p;

	my $sql = qq{
		SELECT *
		FROM TICKET 
		WHERE TYPE=1 
		  AND STATUS=0 
	  	ORDER BY PRIO ASC, DATECREATED};
	foreach(@{sql($sql)}) {	
		$count++;
		show_ticket_small($_);
	}

	print p, "$count ticket(s) encontrado(s).";

	emit_footer();

}

# Tela de detalhes de um ticket, onde é possível efetuar-se ações como
# adição de notas, fechamento, etc.
elsif($q =~ /^\/(\d+)$/) {
	my $id = $1;
	my $head = <<'	END';
	  var panels = new Array('note', 'close', 'prio', 'tags', 'reopen', 'title', 'minutes');
	  var selectedTab = null;
	  function showPanel(tab, name)
	  {
		if (selectedTab) 
		{
		  selectedTab.style.backgroundColor = '';
		}
		selectedTab = tab;
		selectedTab.style.backgroundColor = '#D3D3D3';
		for(i = 0; i < panels.length; i++)
		{
		  document.getElementById(panels[i]).style.display = (name == panels[i]) ? 'block':'none';
		}
		return false;
	  }
	END
	print header(-expires => 'now');
	print start_html(-style => {'src' => $css}, 
		-title => "Detalhe: Ticket #$id", 
		-script => $head
	);
	my $r = sql('SELECT * FROM TICKET WHERE ID=?', $id)->[0];
	if(not defined $r) { die "Ticket $id not found." }
	unless($r->{'TYPE'} == 1) {
		die "Ticket $id is not a Normal type. (Tipo: $r->{'TYPE'})";
	}

	&emit_header;
	print qq{<span class="title">Detalhe: Ticket #$id</span>},p ;
	show_ticket($r);
	if(($r->{'TYPE'} == 1) and ($r->{'STATUS'} == 0) ) {
		print q{<table class="actions" border="0"><tr><td>};
		print q{<a class="tab" onclick="return showPanel(this, 'note');">Adicionar Nota</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'close');">Fechar Ticket</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'prio');">Prioridade de Ação</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'tags');">Palavras-Chave</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'title');">Título</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'minutes');">Tempo</a>};
		print q{</td></tr></table>}, br;
	}
	elsif(($r->{'TYPE'} == 1) and ($r->{'STATUS'} == 1) ) {
		print q{<table class="actions" border="0"><tr><td>};
		print q{<a class="tab" onclick="return showPanel(this, 'reopen');">Reabrir Ticket</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'tags');">Palavras-Chave</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'title');">Título</a> | };
		print q{<a class="tab" onclick="return showPanel(this, 'minutes');">Tempo</a>};
		print q{</td></tr></table>};
	}
	show_form_new_note($id);
	show_form_close_ticket($id);
	show_form_change_prio($id, $r->{'PRIO'});
	show_form_edit_tags_ticket($id);
	show_form_reopen_ticket($id);
	show_form_title_ticket($id, $r->{'TITLE'});
	show_form_minutes_ticket($id);

	emit_footer();
}

elsif($q eq '/new-ticket') {
	print header(-expires => 'now'), start_html(-style => {'src' => $css}, 
		-title => 'Novo Ticket', -onload => 'document.f.title.focus();' );
	emit_header();
	print q{<span class="title">Novo Ticket</span>}, p;
    print q{<a name='new'></a>}, start_form(-name => 'f'),
      textfield( -name => 'title', -size => 90 ), br,
      hidden(
        -name     => 'action',
        -value    => 'create-new-ticket',
        -override => 1
      ),
      submit( 'submit', 'Criar' ), end_form;

	  emit_footer();
}

# Lista tickets por tag. Mostra tickets em aberto e fechados, e registros simples.
elsif($q =~ /^\/(.+?)$/) {
	my $tag = $1;
	my $count = 0;
	my $sql = q{
		SELECT TICKET.*
		FROM TICKET, TAG
		WHERE TAG.TAG = ?
		  AND TAG.TICKET = TICKET.ID
		  AND TICKET.TYPE = 1
	  	  AND TICKET.STATUS = 0
		ORDER BY TICKET.PRIO, TICKET.DATECREATED
	};

    print header( -expires => 'now' ),
      start_html( -style => { 'src' => $css }, -title => "Palavra-chave: $tag" );

	&emit_header;
	print qq{<span class="title">Palavra-chave: $tag</span>}, p;

	foreach(@{sql($sql, $tag)}) {
		$count++;
		show_ticket_small($_);
	}

	print p, "$count ticket(s) encontrado(s).";

	emit_footer()

}
else { die 'invalid url' }

$dbh->disconnect;

sub sanitize_text {
	my $text = shift || return;
	$text =~ s/\r//sg;
	$text =~ s/&/&amp;/gs;
	$text =~ s/</&lt;/gs;
	$text =~ s/>/&gt;/gs;
	$text =~ s/\r?\n/<br>/sg;
	$text =~ s/\t/&nbsp;&nbsp;&nbsp;/sg;
	$text =~ s/(<br>){1,}$//;
	$text =~ s/#([0-9]+)/<a title="Ver Ticket #$1" href='$uri\/$1'>#$1<\/a>/sg;
	return $text;
}

sub show_form_new_note {
	my $id = shift;
	print q{<div class="panel" id="note" style="display: none">};
	print start_form(),
		textarea(-name => 'text', -rows=>4, -columns=>70), br,
		hidden(-name => 'action', -value => 'create-new-note', -override => 1),
		hidden('parent', $id),
		submit('submit', 'Adicionar nota'),
		end_form;
	print q{</div>};
}

sub show_form_change_prio {
	my $id = shift; my $prio = shift;
	print q{<div class="panel" id="prio" style="display: none">};
	print qq{
		<form method="post" action="" enctype="multipart/form-data">
		<select name="prio" >};
	foreach(sort keys %priodesc) {
		if($_ == $prio) {
			print qq{<option selected="selected" value="$_">$priodesc{$_}</option>};
		}
		else {
			print qq{<option value="$_">$priodesc{$_}</option>};
		}
	}
	print qq{
		</select> <input type="hidden" name="action" 
			value="change-ticket-prio"  />
		<input type="hidden" name="id" value="$id"  />
		<input type="submit" name="submit" value="Mudar prioridade de ação" /></form>
	};
	print q{</div>};
}

sub show_form_close_ticket {
	my $id = shift;
	print q{<div class="panel" id="close" style="display: none">};
	print start_form(),
		textarea(-name => 'text', -rows=>4, -columns=>70), br,
		hidden(-name => 'action', -value => 'close-ticket', -override => 1),
		hidden('id', $id),
		submit('submit', 'Fechar Ticket'),
		end_form;
	print q{</div>};
}

sub show_form_reopen_ticket {
	my $id = shift;
	print q{<div class="panel" id="reopen" style="display: none">};
	print start_form(),
		textarea(-name => 'text', -rows=>4, -columns=>70), br,
		hidden(-name => 'action', -value => 'reopen-ticket', -override => 1),
		hidden('id', $id),
		submit('submit', 'Reabrir Ticket'),
		end_form;
	print q{</div>};
}

sub show_form_edit_tags_ticket {
	my $id = shift;
	print q{<div class="panel" id="tags" style="display: none">};
	my $tags = join ' ', get_tags_from_ticket($id);
	print start_form(),
		textfield(-name => 'text', -size => 70, -value=>$tags), br,
		hidden(-name => 'action', -value => 'save-tags-ticket', -override => 1),
		hidden('id', $id),
		submit('submit', 'Salvar palavras-chave'), p,
		font({-color => '#A5A5A5'}, 
		small('Palavras-chave podem ser utilizadas para classificar os Tickets. ',
		'Separar as palavras-chave por espaços.')),
		end_form;
	print q{</div>};
}

sub show_form_title_ticket {
	my $id = shift;
	my $title = shift;
	print q{<div class="panel" id="title" style="display: none">};
	print start_form(),
		textfield(-name => 'text', -size=>70, -value=>$title), br,
		hidden(-name => 'action', -value => 'save-title-ticket', -override => 1),
		hidden('id', $id),
		submit('submit', 'Salvar título'),
		end_form;
	print q{</div>};
}

sub show_form_minutes_ticket {
	my $id = shift;
	my $title = shift;
	print q{<div class="panel" id="minutes" style="display: none">};
	print start_form(),
		textfield(-name => 'minutes', -size => 31,  -value=>''), br,
		hidden(-name => 'action', -value => 'register-minutes', -override => 1),
		hidden('parent', $id),
		submit('submit', 'Contabilizar minutos'),
		end_form;
	print q{</div>};
}

sub timestamp_now {
	return strftime("%Y-%m-%d %H:%M:%S", localtime);
}

sub populate_search {
	my $id = shift;
	my $text = '';
	my $tag = '';
	my $user = ''; # todos os usuários que alteraram o ticket
	$dbh->begin_work;
	sql('DELETE FROM SEARCH WHERE docid = ?', $id);
	my $title = sql('SELECT TITLE FROM ticket WHERE id = ?', $id)->[0]->{'TITLE'};
	foreach(@{sql('SELECT text, user FROM ticket WHERE idparent = ?', $id)}) {
		$text .= $_->{'TEXT'} . ' ';
		$user .= $_->{'USER'} . ' ';
	}
	foreach(@{sql('SELECT tag FROM tag WHERE ticket = ?', $id)}) {
		$tag .= $_->{'TAG'} . ' ';
	}
	sql('INSERT INTO search (docid, title, text, tag, user) VALUES (?,?,?,?,?)', $id, $title, $text, $tag, $user);
	$dbh->commit;
}

sub show_ticket_small {
	my $r = shift;
	my $bgcolor;
	my $priocolor = '';
	my $title = $r->{'TITLE'} || '';
	if($r->{'TYPE'} == 1 and $r->{'STATUS'} == 0) {
		$bgcolor = '';
	}
	elsif($r->{'TYPE'} == 1 and $r->{'STATUS'} == 1) {
		$bgcolor = '#e1e1e1';
	}
	if($r->{'TYPE'} == 1 and $r->{'STATUS'} == 0) {
		if($r->{'PRIO'} == 1)    { $priocolor = '#FF8D8F' }
		elsif($r->{'PRIO'} == 2) { $priocolor = '#EDFF9F' }
		elsif($r->{'PRIO'} == 3) { $priocolor = '' }
		elsif($r->{'PRIO'} == 4) { $priocolor = '#6DF2B2' }
		elsif($r->{'PRIO'} == 5) { $priocolor = '#9FEFF2' }
	}
	print qq{<table class="ticket" width="100%" border="0" bgcolor="$bgcolor">};
	print qq{<tr><td width="5px" title="$priodesc{$r->{PRIO}}" bgcolor="$priocolor">&nbsp;</td>};
	print qq{<td width="80px" valign="top">};
	print qq{<b><a class="ticketlabel" href="$uri/$r->{'ID'}">#$r->{'ID'}</a></b>};
	my @tags = get_tags_from_ticket($r->{'ID'});
	print q{</td><td valign="top">};
	print span({-class => 'tktitle'}, $title);
	print "</td><td valign='top' align='right'>";
	foreach(@tags) {
		my $tag = CGI::escape($_);
		print " <a href='$uri/$tag' class='tag'>$_</a>";
	}
	print q{</td></tr></table>};
}

sub show_ticket {
	my $r = shift;
	my $bgcolor;
	my $priocolor = '';
	my $title = $r->{'TITLE'} || '';
	if($r->{'TYPE'} == 1 and $r->{'STATUS'} == 0) {
		$bgcolor = '';
	}
	elsif($r->{'TYPE'} == 1 and $r->{'STATUS'} == 1) {
		$bgcolor = '#e1e1e1';
	}
	if($r->{'TYPE'} == 1 and $r->{'STATUS'} == 0) {
		if($r->{'PRIO'} == 1)    { $priocolor = '#FF8D8F' }
		elsif($r->{'PRIO'} == 2) { $priocolor = '#EDFF9F' }
		elsif($r->{'PRIO'} == 3) { $priocolor = '' }
		elsif($r->{'PRIO'} == 4) { $priocolor = '#6DF2B2' }
		elsif($r->{'PRIO'} == 5) { $priocolor = '#9FEFF2' }
	}
	print qq{<table class="ticket" width="100%" border="0" bgcolor="$bgcolor">};
	print qq{<tr><td width="5px" title="$priodesc{$r->{PRIO}}" bgcolor="$priocolor">&nbsp;</td>};
	print qq{<td width="120px" valign="top">};
	print qq{<b><a class="ticketlabel" href="$uri/$r->{'ID'}">Ticket #$r->{'ID'}</a></b><br>};
	my $datec = strip_date($r->{'DATECREATED'});
	print qq{Criado: <span title="$r->{'DATECREATED'}">$datec</span><br>};
	if($r->{'TYPE'} == 1 and $r->{'STATUS'} == 1) {
		my $dated = strip_date($r->{'DATECLOSED'});
		print qq{Fechado: <span title="$r->{'DATECLOSED'}">$dated</span><br>};
	}
	print qq{Autor: $r->{'USER'}<br>};
	my @tags = get_tags_from_ticket($r->{'ID'});
	foreach(@tags) {
		my $tag = CGI::escape($_);
		print "<a href='$uri/$tag' class='tag'>$_</a>", " ";
	}
	print q{</td><td valign="top">};
	print b($title);
	if($r->{'TEXT'} ne '') {
		print p, sanitize_text($r->{'TEXT'});
	}
	else { print br };
	foreach(@{sql('SELECT * FROM TICKET WHERE IDPARENT=? ORDER BY ID', $r->{'ID'})}) {
		if($_->{'TYPE'} == 3) {
			# Nota de um ticket
			my $date = strip_date($_->{'DATECREATED'});
			print br, qq{<b title="$_->{'DATECREATED'}">$date - $_->{'USER'}: </b>}, 
				sanitize_text($_->{'TEXT'});
		}
		elsif($_->{'TYPE'} == 5) {
			# Fechamento de um ticket
			my $date = strip_date($_->{'DATECREATED'});
			print br, qq{<b title="$_->{'DATECREATED'}">$date - $_->{'USER'} - Fechado: </b>},
				sanitize_text($_->{'TEXT'});
		}
		elsif($_->{'TYPE'} == 6) {
			# Reabertura de um ticket
			my $date = strip_date($_->{'DATECREATED'});
			print br, qq{<b title="$_->{'DATECREATED'}">$date - $_->{'USER'} - Reaberto: </b>},
				sanitize_text($_->{'TEXT'});
		}
		elsif($_->{'TYPE'} == 7) {
			# Contabilização de tempo
			my $date = strip_date($_->{'DATECREATED'});
			print br, qq{<b title="$_->{'DATECREATED'}">$date - $_->{'USER'} - Minutos: </b>},
				$_->{'MINUTES'};
		}
	}
	print q{</td></tr></table><p>};
}

sub get_tags_from_ticket {
	my $id = shift;
	my @tags = map { $_ = $_->{'TAG'} }
      @{ sql( 'SELECT TAG FROM TAG WHERE TICKET=?', $id ) };
	return sort @tags;
}

# Emite o cabeçalho padrão das páginas, com menu no topo e barra de pesquisa.
sub emit_header {
	print qq{
		<table border="0" align="right">
		<tr>
		<td class="topmenu">
			olá <b>$user</b>! 
			<a href='$uri' accesskey='A'>tickets abertos</a>
			| <a href='$uri/new-ticket' accesskey='N'>novo ticket</a>
		</td> <tr></tr> <td align=right>
		<form method="post" action="$uri" enctype="multipart/form-data">
			<input type="text" name="search" size="15" accesskey='S'>
			<input type="submit" name="search" value="procura" />
		</form>
		</td></tr></table>
	};
}

# Emite rodapé com nome do sistema e versão.
sub emit_footer {
	print qq{<p><small><font color="gray"><div align="right">sistema
		<a href="http://zanardo.org/ticket.html">ticket</a> versão $VERSION</small></div></font>};
}

# Recebe "2005-05-05 05:05:05" e converte para "2005-05-05".
sub strip_date {
	my $datetime = shift;
	$datetime =~ s/^(\d{4}-\d{2}-\d{2}) .*$/$1/;
	return $datetime;
}

# Atualiza o campo DATEMODIFIED de um Ticket (tipo Registro Simples ou Normal). 
# Chamada ao criar-se uma nova Nota, fechar-se, ou reabrir-se um Ticket. Este
# campo facilita a procura ordenada por últimas modificações.
sub update_ticket_mtime {
	my $id = shift;
	sql('UPDATE TICKET SET DATEMODIFIED=? WHERE ID=?', &timestamp_now(), $id);
}

# Executa uma sentença SQL, opcionalmente com parâmetros, e retorna uma arrayref
# de hashrefs com os resultados.
sub sql {
	my $sql = shift;
	my $sth = $dbh->prepare($sql) or die $dbh->errstr;
	$sth->execute(@_) or die $dbh->errstr;
	return unless $sql =~ /^[\s\n\r\t]*SELECT/i;
	my $result = [ ];
	while(my $r = $sth->fetchrow_hashref) {
		push @$result, $r;
	}
	return $result;
}

__DATA__
body { 
	margin: 1em 2em 2em 2em;
	font-family: Verdana, Arial, sans-serif;
	font-size: 9pt;
	background-color: #F1F3F4;
}

.tab { 
	color: #0000EE;
	text-decoration: underline;
	font-family: Verdana, Arial, sans-serif;
	font-size: 8pt;
}

a:link { color: #0000EE; }
a:visited { color: #0000EE; }
a:active { color: #0000EE; }
a:hover { color: #FF0000; }

input, textarea, select, submit { 
	font-family: Verdana, Arial, sans-serif;
	font-size: 8pt;
	background-color: #F1F3F4;
	border: 1px solid #336699; 
}

.topmenu {
	font-family: Arial, sans-serif;
	font-size: 9pt;
}

.title {
  font-family: "Gill Sans", "Trebuchet MS", Verdana, sans-serif;
  font-size: 24pt;
  font-weight: normal; 
}

.tags {
	border: 1px dotted #336699; 
	font-family: Verdana, Arial, sans-serif;
	font-size: 8pt;
}

.actions {
}

.ticket {
	font-family: Verdana, Arial, sans-serif;
	font-size: 10px;
	border: 1px solid #ffffff; 
}

.ticketlabel {
	font-size: 12px;
}

.tag {
	background-color: yellow;
	text-decoration: none;
	font-weight: bold;
}

.tktitle { font-family: "Verdana"; font-size: 12px; font-weight: bold; }
